# Generic configuration
AllCops:
  Include:
    - '**/fastlane/Fastfile'
    - '**/lib/fastlane/plugin/google_cloud_storage_update.rb'
    - '**/lib/fastlane/plugin/google_cloud_storage_update/version.rb'
    - '**/lib/fastlane/plugin/google_cloud_storage_update/actions/*'
    - '**/lib/fastlane/plugin/google_cloud_storage_update/helper/*'
#  Exclude:
#    - '**/lib/assets/custom_action_template.rb'
#    - './vendor/**/*'
  NewCops: enable

require:
  - rubocop-rake
  - rubocop-rspec

# Gemspec checks
Gemspec/DeprecatedAttributeAssignment: # (new in 1.10)
  Enabled: true

# Layout checks
Layout/DotPosition: # HoundCI doesn't like this rule
  Enabled: true
Layout/LineEndStringConcatenationIndentation: # (new in 1.18)
  Enabled: true
Layout/LineLength: # Configuration parameters: AllowURI, URISchemes.
  Max: 370
Layout/SpaceBeforeBrackets: # (new in 1.7)
  Enabled: true

# Lint checks
Lint/AmbiguousAssignment: # (new in 1.7)
  Enabled: true
Lint/DeprecatedConstants: # (new in 1.8)
  Enabled: true
Lint/DuplicateBranch: # (new in 1.3)
  Enabled: true
Lint/DuplicateRegexpCharacterClassElement: # (new in 1.1)
  Enabled: true
Lint/EmptyBlock: # (new in 1.1)
  Enabled: true
Lint/EmptyClass: # (new in 1.3)
  Enabled: true
Lint/EmptyInPattern: # (new in 1.16)
  Enabled: true
Lint/LambdaWithoutLiteralBlock: # (new in 1.8)
  Enabled: true
Lint/MissingSuper: # This is used a lot across the fastlane code base for config files
  Enabled: true
Lint/NoReturnInBeginEndBlocks: # (new in 1.2)
  Enabled: true
Lint/NumberedParameterAssignment: # (new in 1.9)
  Enabled: true
Lint/OrAssignmentToConstant: # (new in 1.9)
  Enabled: true
Lint/ParenthesesAsGroupedExpression: # the let(:key) { ... }
  Exclude:
    - '**/spec/**/*'
Lint/RedundantDirGlobSort: # (new in 1.8)
  Enabled: true
Lint/SymbolConversion: # (new in 1.9)
  Enabled: true
Lint/ToEnumArguments: # (new in 1.1)
  Enabled: true
Lint/TripleQuotes: # (new in 1.9)
  Enabled: true
Lint/UnexpectedBlockArity: # (new in 1.5)
  Enabled: true
Lint/UnmodifiedReduceAccumulator: # (new in 1.1)
  Enabled: true
Lint/UselessAssignment: # specs sometimes have useless assignments, which is fine
  Exclude:
    - '**/spec/**/*'
Layout/SpaceAroundOperators: # Disable '+ should be surrounded with a single space' for xcodebuild_spec.rb
  Exclude:
    - '**/spec/actions_specs/xcodebuild_spec.rb'
Lint/SuppressedException: # Sometimes we allow a rescue block that doesn't contain code
  Enabled: true
Lint/UnusedBlockArgument: # Cop supports --auto-correct.
  Enabled: true
Lint/UnusedMethodArgument: # e.g. def self.is_supported?(platform) we may never use `platform`
  Enabled: true

# Metrics checks
Metrics/AbcSize:
  Enabled: false
Metrics/BlockLength: # this would cause errors with long lanes
  Enabled: false
Metrics/ClassLength: # Configuration parameters: CountComments.
  Max: 320
Metrics/CyclomaticComplexity:
  Enabled: true
Metrics/MethodLength:
  Enabled: false
Metrics/ParameterLists: # Configuration parameters: CountKeywordArgs.
  Max: 17
Metrics/PerceivedComplexity:
  Max: 18

# Naming checks
Naming/FileName: #
  Enabled: true
Naming/InclusiveLanguage: # (new in 1.18)
  Enabled: true
Naming/PredicateName: # This would reject is_ in front of methods. We use `is_supported?` everywhere already
  Enabled: false
Naming/VariableNumber: # certificate_1 is an okay variable name
  Enabled: true

# RSpec checks
RSpec/IdenticalEqualityAssertion: # (new in 2.4)
  Enabled: true

# Security checks
Security/Eval:
  Enabled: true

# Style checks
Style/AndOr: # and and or is okay
  Enabled: false
Style/ArgumentsForwarding: # (new in 1.1)
  Enabled: true
Style/ClassCheck: # kind_of? is a good way to check a type
  EnforcedStyle: kind_of?
Style/CollectionCompact: # (new in 1.2)
  Enabled: true
Style/ClassAndModuleChildren: # We want to allow class Fastlane::Class
  Enabled: false
Style/CollectionMethods: # Sometimes we just want to 'collect'
  Enabled: false
Style/ConditionalAssignment: # something = if something_else that's confusing
  Enabled: false
Style/Documentation: # We're not there yet
  Enabled: true
Style/DocumentDynamicEvalDefinition: # (new in 1.1)
  Enabled: true
Style/DoubleNegation: # We allow !! as it's an easy way to convert to boolean
  Enabled: false
Style/EndlessMethod: # (new in 1.8)
  Enabled: true
Style/GlobalVars: # Needed for $verbose
  Enabled: false
Style/GuardClause: # Sometimes it's easier to read without guards
  Enabled: false
Style/HashConversion: # (new in 1.10)
  Enabled: true
Style/HashExcept: # (new in 1.7)
  Enabled: true
Style/IfInsideElse: # Adds complexity
  Enabled: false
Style/IfUnlessModifier: # Having if in the same line might not always be good
  Enabled: false
Style/IfWithBooleanLiteralBranches: # (new in 1.9)
  Enabled: true
Style/InPatternThen: # (new in 1.16)
  Enabled: true
Style/MissingRespondToMissing:
  Enabled: false
Style/MultilineInPatternThen: # (new in 1.16)
  Enabled: true
Style/MutableConstant: # Added after upgrade to 0.38.0
  Enabled: false
Style/NegatedIfElseCondition: # (new in 1.2)
  Enabled: true
Style/NilLambda: # (new in 1.3)
  Enabled: true
Style/NumericLiteralPrefix:
  Enabled: false
Style/NumericPredicate: # .length == 0 is also good, we don't always want .zero?
  Enabled: false
Style/PerlBackrefs: # We allow the $
  Enabled: false
Style/QuotedSymbols: # (new in 1.16)
  Enabled: true
Style/RedundantArgument: # (new in 1.4)
  Enabled: true
Style/RedundantReturn: # Better too much 'return' than one missing
  Enabled: false
Style/RedundantSelf: # Better to have too much self than missing a self
  Enabled: false
Style/SignalException: # raise and fail are both okay
  Enabled: false
Style/SpecialGlobalVars: # $? Exit
  Enabled: false
Style/StringChars: # (new in 1.12)
  Enabled: true
Style/StringLiterals: # We allow both " and '
  Enabled: false
Style/SwapValues: # (new in 1.1)
  Enabled: true
Style/TernaryParentheses:
  Enabled: false
Style/WordArray: # The %w might be confusing for new users
  MinSize: 19
Style/ZeroLengthPredicate: # length > 0 is good
  Enabled: false
